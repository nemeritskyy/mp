spring:
  datasource:
    url: jdbc:mysql://${DEV_DB_HOST}:${DEV_DB_PORT}/${DEV_DB_NAME}?useSSL=true&useUnicode=true&characterEncoding=UTF-8
    username: ${DEV_DB_USER}
    password: ${DEV_DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      max-lifetime: 90000
      keepaliveTime: 30000
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        jdbc:
          time_zone: GMT+3
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5Dialect
  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USER}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls.enable: true
  servlet:
    multipart:
      enabled: true # multipart support
      max-file-size: 10MB # max filesize
      max-request-size: 20MB # max all filesize
      file-size-threshold: 0 # threshold file size at which they will be written to temporary storage instead of permanent location
ftp:
  server: ${DEV_FTP_HOST}
  port: ${DEV_FTP_PORT}
  username: ${DEV_FTP_USER}
  password: ${DEV_FTP_PASSWORD}
server:
  port: 8080
  error:
    include-stacktrace: never
    include-message: always
application:
  url: ${DEV_URL}
  image-dns: ${DEV_IMAGE_DNS}
  security:
    jwt:
      secret-key: ${SECRET_KEY}
      expiration: 1800000 # 30 min
      refresh-token:
        expiration: 86400000 # 1 day
bucket4j:
  get:
    capacity: ${GET_CAPACITY}
    regenerate: ${GET_REGENERATE}
  post:
    capacity: ${POST_CAPACITY}
    regenerate: ${POST_REGENERATE}
  patch:
    capacity: ${PATCH_CAPACITY}
    regenerate: ${PATCH_REGENERATE}
  delete:
    capacity: ${DELETE_CAPACITY}
    regenerate: ${DELETE_REGENERATE}
telegram:
  bot:
    name: ${BOT_NAME}
    token: ${BOT_TOKEN}
sentry:
  dsn: ${SENTRY_DSN}
  # Set traces-sample-rate to 1.0 to capture 100% of transactions for performance monitoring.
  # We recommend adjusting this value in production.
  traces-sample-rate: 1.0